name: Deploy Go App to VPS

on:
  push:
    branches:
      - main # Or your deployment branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # Use your Go version

      - name: Build Go Application
        # Adjust build path and output name as needed
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o my-app-binary ./cmd/server/main.go
          echo "Build complete: my-app-binary"
        # -ldflags="-s -w" creates a smaller binary (strips debug info)

      # Optional: Run tests
      # - name: Run Unit Tests
      #   run: go test ./...

      - name: Prepare Artifact
        run: |
          # Create a tarball containing the binary and any other necessary files
          # Example: If you have static assets or config templates
          # mkdir release_content
          # cp my-app-binary release_content/
          # cp -r static/ release_content/ # Example: copy static files
          # tar -czf artifact.tar.gz -C release_content .
          # For just the binary:
          tar -czf artifact.tar.gz my-app-binary
          echo "Artifact created: artifact.tar.gz"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3 # Use a reliable SSH action
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          port: ${{ secrets.VPS_SSH_PORT }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Define variables on the remote server
            APP_NAME="${{ secrets.APP_NAME }}"
            UPLOAD_PATH="/home/${{ secrets.VPS_SSH_USER }}/deploy_upload_${APP_NAME}_$(date +%s).tar.gz"
            DEPLOY_SCRIPT="/opt/deploy/scripts/deploy.sh"

            echo "-----> Uploading artifact to ${UPLOAD_PATH}"
            # Use scp within the script section; this action handles artifact transfer implicitly
            # Need to ensure the artifact exists from the previous step
            # `ssh-action` v1+ doesn't have direct scp/sync, we pipe it
            cat artifact.tar.gz | ssh -p ${{ secrets.VPS_SSH_PORT }} -i $SSH_AUTH_SOCK -o StrictHostKeyChecking=no ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_SSH_HOST }} "cat > ${UPLOAD_PATH}"


            echo "-----> Executing deployment script on server"
            ssh -p ${{ secrets.VPS_SSH_PORT }} -i $SSH_AUTH_SOCK -o StrictHostKeyChecking=no ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_SSH_HOST }} "sudo ${DEPLOY_SCRIPT} ${APP_NAME} ${UPLOAD_PATH}"

            echo "-----> Deployment script finished"